//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PCPOS.wsSoftKontrol {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsSoftKontrolSoap", Namespace="http://tempuri.org/")]
    public partial class wsSoftKontrol : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegistracijaOperationCompleted;
        
        private System.Threading.SendOrPostCallback KontrolaOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkIfProductKeyExistsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsSoftKontrol() {
            this.Url = global::PCPOS.Properties.Settings.Default.PC_POS_wsSoftKontrol_wsSoftKontrol;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RegistracijaCompletedEventHandler RegistracijaCompleted;
        
        /// <remarks/>
        public event KontrolaCompletedEventHandler KontrolaCompleted;
        
        /// <remarks/>
        public event checkIfProductKeyExistsCompletedEventHandler checkIfProductKeyExistsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Registracija", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Registracija(string productKey, string activationKey, string oib, string nazivPoslovnice, int idGrad, string adresa, string fisPoslo, int napUred) {
            object[] results = this.Invoke("Registracija", new object[] {
                        productKey,
                        activationKey,
                        oib,
                        nazivPoslovnice,
                        idGrad,
                        adresa,
                        fisPoslo,
                        napUred});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RegistracijaAsync(string productKey, string activationKey, string oib, string nazivPoslovnice, int idGrad, string adresa, string fisPoslo, int napUred) {
            this.RegistracijaAsync(productKey, activationKey, oib, nazivPoslovnice, idGrad, adresa, fisPoslo, napUred, null);
        }
        
        /// <remarks/>
        public void RegistracijaAsync(string productKey, string activationKey, string oib, string nazivPoslovnice, int idGrad, string adresa, string fisPoslo, int napUred, object userState) {
            if ((this.RegistracijaOperationCompleted == null)) {
                this.RegistracijaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegistracijaOperationCompleted);
            }
            this.InvokeAsync("Registracija", new object[] {
                        productKey,
                        activationKey,
                        oib,
                        nazivPoslovnice,
                        idGrad,
                        adresa,
                        fisPoslo,
                        napUred}, this.RegistracijaOperationCompleted, userState);
        }
        
        private void OnRegistracijaOperationCompleted(object arg) {
            if ((this.RegistracijaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegistracijaCompleted(this, new RegistracijaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Kontrola", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Kontrola(string oib) {
            object[] results = this.Invoke("Kontrola", new object[] {
                        oib});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KontrolaAsync(string oib) {
            this.KontrolaAsync(oib, null);
        }
        
        /// <remarks/>
        public void KontrolaAsync(string oib, object userState) {
            if ((this.KontrolaOperationCompleted == null)) {
                this.KontrolaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKontrolaOperationCompleted);
            }
            this.InvokeAsync("Kontrola", new object[] {
                        oib}, this.KontrolaOperationCompleted, userState);
        }
        
        private void OnKontrolaOperationCompleted(object arg) {
            if ((this.KontrolaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KontrolaCompleted(this, new KontrolaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkIfProductKeyExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool checkIfProductKeyExists(string productKey) {
            object[] results = this.Invoke("checkIfProductKeyExists", new object[] {
                        productKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkIfProductKeyExistsAsync(string productKey) {
            this.checkIfProductKeyExistsAsync(productKey, null);
        }
        
        /// <remarks/>
        public void checkIfProductKeyExistsAsync(string productKey, object userState) {
            if ((this.checkIfProductKeyExistsOperationCompleted == null)) {
                this.checkIfProductKeyExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckIfProductKeyExistsOperationCompleted);
            }
            this.InvokeAsync("checkIfProductKeyExists", new object[] {
                        productKey}, this.checkIfProductKeyExistsOperationCompleted, userState);
        }
        
        private void OncheckIfProductKeyExistsOperationCompleted(object arg) {
            if ((this.checkIfProductKeyExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkIfProductKeyExistsCompleted(this, new checkIfProductKeyExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RegistracijaCompletedEventHandler(object sender, RegistracijaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegistracijaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegistracijaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void KontrolaCompletedEventHandler(object sender, KontrolaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KontrolaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KontrolaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void checkIfProductKeyExistsCompletedEventHandler(object sender, checkIfProductKeyExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkIfProductKeyExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkIfProductKeyExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591